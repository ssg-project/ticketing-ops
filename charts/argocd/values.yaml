argo-cd:
  notifications:
    enabled: true
    logLevel: debug

  server:
    service:
      type: ClusterIP
      ports:
      - name: http
        port: 80
        targetPort: 8080
        protocol: TCP
    extraArgs:
      - --insecure
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - argocd.gmmt.store
      rules:
        - host: argocd.gmmt.store
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: argocd-server
                  port:
                    number: 80
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
  
  redis:
    enabled: true
  
  configs:
    params:
      server.insecure: true
    secret:
      slack-token: https://hooks.slack.com/services/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
      notifications.slack: |
        token: $slack-token
        username: ArgoCD
        icon: https://argo-cd.readthedocs.io/en/stable/assets/logo.png

    cm:
      context: |
        argocdUrl: https://argocd.gmmt.store

      notifications.template.slack: |
        message: |
          {{if eq .notificationType "slack"}}
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "{{.app.metadata.name}}: {{.app.status.operationState.message}}",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*애플리케이션:* {{.app.metadata.name}}\n*상태:* {{.app.status.sync.status}}\n*작업:* {{.app.status.operationState.operation.sync.revision}}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*링크:* {{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
                }
              }
            ]
          }
          {{else}}
          {{ (call .webhook.slack.attachments .) }}
          {{end}}
      
      notifications.trigger.on-scaling-replica-set: |
        - description: Application replica set scaling
          send: [slack]
          when: app.status.operationState.phase in ['Running'] and app.status.operationState.message contains 'replica set'
      notifications.trigger.on-rollout-updated: |
        - description: Application rollout updated
          send: [slack]
          when: app.status.operationState.phase in ['Succeeded'] and app.status.operationState.message contains 'updated'
      notifications.trigger.on-rollout-step-completed: |
        - description: Application rollout step completed
          send: [slack]
          when: app.status.operationState.phase in ['Succeeded'] and app.status.operationState.message contains 'completed'
      notifications.trigger.on-rollout-aborted: |
        - description: Application rollout aborted
          send: [slack]
          when: app.status.operationState.phase in ['Failed'] and app.status.operationState.message contains 'aborted'
      notifications.trigger.on-analysis-run-failed: |
        - description: Analysis run failed
          send: [slack]
          when: app.status.operationState.phase in ['Failed'] and app.status.operationState.message contains 'analysis'
      notifications.trigger.on-analysis-run-error: |
        - description: Analysis run error
          send: [slack]
          when: app.status.operationState.phase in ['Error'] and app.status.operationState.message contains 'analysis'

      notifications.trigger.on-sync-succeeded: |
        - description: Application synchronized successfully
          send: [slack]
          when: app.status.operationState.phase == 'Succeeded' and app.status.operationState.operation.sync != null
      notifications.trigger.on-sync-failed: |
        - description: Application synchronization failed
          send: [slack]
          when: app.status.operationState.phase == 'Failed' and app.status.operationState.operation.sync != null
      notifications.trigger.on-sync-status-change: |
        - description: Application sync status changed
          send: [slack]
          when: app.status.sync.status != app.status.operationState.syncResult.status and app.status.operationState != null

      notifications.service.slack: |
        token: $slack-token
        username: ArgoCD Notifications
        icon: https://argo-cd.readthedocs.io/en/stable/assets/logo.png
        recipients:
          - name: argocd-alert
            channels:
              - '#argocd-alert'

  applications:
    - name: default-app
      namespace: argocd
      annotations:
        notifications.argoproj.io/subscriptions: |
          - trigger: [on-scaling-replica-set, on-rollout-updated, on-rollout-step-completed, on-sync-succeeded, on-sync-failed, on-sync-status-change]
            destinations:
              - service: slack
                recipients: argocd-alert
          - trigger: [on-rollout-aborted, on-analysis-run-failed, on-analysis-run-error]
            destinations:
              - service: slack
                recipients: argocd-alert