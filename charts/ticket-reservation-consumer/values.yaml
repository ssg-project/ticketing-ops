replicaCount: 1
image:
  repository: n206177862976.dkr.ecr.ap-northeast-2.amazonaws.com/ticketing/gmmt
  pullPolicy: Always
  tag: 4f6463ac3c9063526be7dd92ab91038792a710da

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: true
  automount: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::206177862976:role/soyi-cluster-20250204021931960700000002"
  name: ""

podAnnotations: {}
podLabels: {}
podSecurityContext: {}

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9093

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: 9093
readinessProbe:
  httpGet:
    path: /health
    port: 9093

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}
tolerations: []
affinity: {}

secret:
  database:
    host: soyi-instance-1.ckekx9n1eyul.ap-northeast-2.rds.amazonaws.com
    port: 3306
    username: admin
    password: gmmt1234
    name: soyi
  kafka:
    broker_url: "127.0.0.1:9092"
    topic: "ticketing-reservation"
    # group_id: "reservation-group"
  
  redis:
    host: "127.0.0.1"
    port: "6379"
  
  websocket:
    server_url: "ws://127.0.0.1:9000/ws"