replicaCount: 1
image:
  repository: 206177862976.dkr.ecr.ap-northeast-2.amazonaws.com/ticketing/gmmt
  pullPolicy: Always
  tag: 4fed0c30113feba79a3eb5cfe4f3286234cdb9ee
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: true
  automount: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::206177862976:role/soyi_letsgo-cluster-20250212072443819600000001"
  name: ""
podAnnotations: {}
podLabels: {}
podSecurityContext: {}
securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 9093
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: {}
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /health
#     port: 9093
# readinessProbe:
#   httpGet:
#     path: /health
#     port: 9093
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}
tolerations: []
affinity: {}
secret:
  database:
    host: database-1.ckekx9n1eyul.ap-northeast-2.rds.amazonaws.com
    port: "3306"
    username: admin
    password: adminadmin
    name: database-1
  kafka:
    broker_url: common-kafka.default.svc.cluster.local:9092
    topic: "ticketing-reservation"
    groupId: "reservation-group"
  redis:
    host: redis-master.default.svc.cluster.local
    port: "6379"
  websocket:
    server_url: websocket.default.svc.cluster.local
